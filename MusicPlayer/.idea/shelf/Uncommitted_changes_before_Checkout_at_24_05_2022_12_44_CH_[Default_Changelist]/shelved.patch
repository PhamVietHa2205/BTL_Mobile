Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/headset_icon.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_music.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_music_player.xml\" value=\"0.142\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_settings.xml\" value=\"0.142\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/log_in_icon.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/menu_icon.xml\" value=\"0.142\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/next_icon.xml\" value=\"0.142\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/rate_icon.xml\" value=\"0.142\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/refresh_icon.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/search_icon.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/shuffle_icon.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/theme_color_icon.xml\" value=\"0.142\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/layout/activity_main.xml\" value=\"0.152\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/layout/drawer_header_layout.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/layout/fragment_tab.xml\" value=\"0.1068840579710145\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/layout/player_layout.xml\" value=\"0.264\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/layout/playlist_items.xml\" value=\"0.1068840579710145\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/layout/song_details.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/menu/navigation_menu.xml\" value=\"0.20364583333333333\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/about_icon.xml\" value=\"0.108\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/favorite_icon.xml\" value=\"0.108\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/layout/activity_main.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/layout/drawer_header_layout.xml\" value=\"0.14479166666666668\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/layout/fragment_device_artist.xml\" value=\"0.14479166666666668\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/layout/fragment_tab.xml\" value=\"0.13072916666666667\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/layout/player_layout.xml\" value=\"0.1\" />\r\n        <entry key=\"..\\:/Users/nguye/AndroidStudioProjects/BTL_Mobile/MusicPlayer/app/src/main/res/layout/playlist_items.xml\" value=\"0.17135416666666667\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"12\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.Nullable\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.Nullable\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"11\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.NonNull\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.NonNull\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -3,6 +3,26 @@
   <component name="DesignSurface">
     <option name="filePathToZoomLevelMap">
       <map>
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable-v24/ic_launcher_foreground.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/about_icon.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/arrow_forward.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/favorite_icon.xml" value="0.121" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_favorite_filled.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_launcher_background.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_music.xml" value="0.121" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_music_player.xml" value="0.121" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_settings.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/log_in_icon.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/menu_icon.xml" value="0.1705" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/pause_icon.xml" value="0.121" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/play_icon.xml" value="0.121" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/layout/activity_main.xml" value="0.10989583333333333" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/layout/drawer_header_layout.xml" value="0.13360507246376813" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/layout/fragment_tab.xml" value="0.13360507246376813" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/layout/player_layout.xml" value="0.13360507246376813" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/layout/playlist_items.xml" value="0.10989583333333333" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/menu/action_bar_menu.xml" value="0.264" />
+        <entry key="..\:/BTL_Mobile/MusicPlayer/app/src/main/res/menu/navigation_menu.xml" value="0.2" />
         <entry key="..\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable-v24/ic_launcher_foreground.xml" value="0.1" />
         <entry key="..\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/headset_icon.xml" value="0.1" />
         <entry key="..\:/Documents/PhatTrienUngDungDiDong/BTL_Mobile/MusicPlayer/app/src/main/res/drawable/ic_music.xml" value="0.1" />
Index: app/src/main/java/com/example/application/musicplayer/Activity/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.application.musicplayer.Activity;\r\n\r\nimport android.Manifest;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.SearchManager;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.pm.PackageManager;\r\nimport android.media.MediaPlayer;\r\nimport android.os.Build;\r\nimport android.os.Handler;\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.example.application.musicplayer.Fragments.CloudSongFragment;\r\nimport com.example.application.musicplayer.Fragments.DeviceAlbumFragment;\r\nimport com.example.application.musicplayer.Model.CreateNotification;\r\nimport com.example.application.musicplayer.Service.OnClearFromRecentService;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.tabs.TabLayout;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.viewpager.widget.ViewPager;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport android.os.Bundle;\r\n\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.SearchView;\r\nimport android.widget.SeekBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.example.application.musicplayer.Adapter.ViewPagerAdapter;\r\nimport com.example.application.musicplayer.DB.FavoritesOperations;\r\nimport com.example.application.musicplayer.Fragments.DeviceSongFragment;\r\nimport com.example.application.musicplayer.Fragments.CurrentSongFragment;\r\nimport com.example.application.musicplayer.Fragments.FavSongFragment;\r\nimport com.example.application.musicplayer.Fragments.DeviceArtistFragment;\r\nimport com.example.application.musicplayer.Model.SongsList;\r\nimport com.example.application.musicplayer.R;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener, DeviceSongFragment.createDataParse, FavSongFragment.createDataParsed, CurrentSongFragment.createDataParsed, CloudSongFragment.createDataParse, DeviceArtistFragment.createDataParse, DeviceAlbumFragment.createDataParse {\r\n    public static ArrayList<SongsList> currentOfflineList = new ArrayList<>();\r\n    private Menu menu;\r\n    private ImageButton imgBtnPlayPause, imgbtnReplay, imgbtnShuffle, imgBtnPrev, imgBtnNext, imgBtnSetting;\r\n    private TabLayout tabLayout;\r\n    private ViewPager viewPager;\r\n    private ViewPagerAdapter viewPagerAdapter;\r\n    private SeekBar seekbarController;\r\n    private DrawerLayout mDrawerLayout;\r\n    private TextView tvCurrentTime, tvTotalTime;\r\n    private int playMode;\r\n    private int playButton = R.drawable.pause_icon;\r\n    private ArrayList<SongsList> songList;\r\n    private ArrayList<SongsList> defaultSongList = new ArrayList<>();\r\n    private int currentPosition;\r\n    private String searchText = \"\";\r\n    private SongsList currSong;\r\n\r\n    private boolean checkFlag = false, repeatFlag = false, shuffleFlag = false,  playContinueFlag = false, favFlag = true, playlistFlag = false;\r\n    private final int MY_PERMISSION_REQUEST = 100;\r\n    private int allSongLength;\r\n\r\n    MediaPlayer mediaPlayer;\r\n    Handler handler;\r\n    Runnable runnable;\r\n    NotificationManager notificationManager;\r\n    Intent openNotification;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        createNotificationChannel();\r\n        Log.e(\"ABC\", \"Started\");\r\n        registerReceiver(broadcastReceiver, new IntentFilter(\"TRACKS_TRACKS\"));\r\n        openNotification = new Intent(getBaseContext(), OnClearFromRecentService.class);\r\n        startService(openNotification);\r\n        init();\r\n        grantedPermission();\r\n    }\r\n\r\n    BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            String action = intent.getExtras().getString(\"actionname\");\r\n            switch (action) {\r\n                case CreateNotification.ACTION_PREV:\r\n                    playPrevious();\r\n                    break;\r\n                case CreateNotification.ACTION_PLAY:\r\n                    playPause();\r\n                    break;\r\n                case CreateNotification.ACTION_NEXT:\r\n                    playNext();\r\n                    break;\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Initialising the views\r\n     */\r\n\r\n    private void init() {\r\n\r\n        imgBtnPrev = findViewById(R.id.img_btn_previous);\r\n        imgBtnNext = findViewById(R.id.img_btn_next);\r\n        imgbtnReplay = findViewById(R.id.img_btn_replay);\r\n        imgbtnShuffle = findViewById(R.id.img_btn_shuffle);\r\n        imgBtnSetting = findViewById(R.id.img_btn_setting);\r\n\r\n        tvCurrentTime = findViewById(R.id.tv_current_time);\r\n        tvTotalTime = findViewById(R.id.tv_total_time);\r\n        FloatingActionButton refreshSongs = findViewById(R.id.btn_refresh);\r\n        seekbarController = findViewById(R.id.seekbar_controller);\r\n        viewPager = findViewById(R.id.songs_viewpager);\r\n        NavigationView navigationView = findViewById(R.id.nav_view);\r\n        mDrawerLayout = findViewById(R.id.drawer_layout);\r\n        imgBtnPlayPause = findViewById(R.id.img_btn_play);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        handler = new Handler();\r\n        mediaPlayer = new MediaPlayer();\r\n\r\n        toolbar.setTitleTextColor(getResources().getColor(R.color.text_color));\r\n        setSupportActionBar(toolbar);\r\n\r\n        ActionBar actionBar = getSupportActionBar();\r\n        assert actionBar != null;\r\n        actionBar.setDisplayHomeAsUpEnabled(true);\r\n        actionBar.setHomeAsUpIndicator(R.drawable.menu_icon);\r\n\r\n        imgBtnNext.setOnClickListener(this);\r\n        imgBtnPrev.setOnClickListener(this);\r\n        imgbtnReplay.setOnClickListener(this);\r\n        imgbtnShuffle.setOnClickListener(this);\r\n        refreshSongs.setOnClickListener(this);\r\n        imgBtnPlayPause.setOnClickListener(this);\r\n        imgBtnSetting.setOnClickListener(this);\r\n\r\n        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n                item.setChecked(true);\r\n                mDrawerLayout.closeDrawers();\r\n                switch (item.getItemId()) {\r\n                    case R.id.nav_about:\r\n                        about();\r\n                        break;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to ask user to grant the permission.\r\n     */\r\n\r\n    private void grantedPermission() {\r\n        if (ContextCompat.checkSelfPermission(MainActivity.this,\r\n                Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(MainActivity.this,\r\n                    new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, MY_PERMISSION_REQUEST);\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,\r\n                    Manifest.permission.READ_EXTERNAL_STORAGE)) {\r\n                ActivityCompat.requestPermissions(MainActivity.this,\r\n                        new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, MY_PERMISSION_REQUEST);\r\n            } else {\r\n                if (ContextCompat.checkSelfPermission(MainActivity.this,\r\n                        Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\r\n                    Snackbar snackbar = Snackbar.make(mDrawerLayout, \"Provide the Storage Permission\", Snackbar.LENGTH_LONG);\r\n                    snackbar.show();\r\n                }\r\n            }\r\n        } else {\r\n            setPagerLayout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checking if the permission is granted or not\r\n     *\r\n     * @param requestCode\r\n     * @param permissions\r\n     * @param grantResults\r\n     */\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        switch (requestCode) {\r\n            case MY_PERMISSION_REQUEST:\r\n                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                    if (ContextCompat.checkSelfPermission(MainActivity.this,\r\n                            Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\r\n                        Toast.makeText(this, \"Permission Granted!\", Toast.LENGTH_SHORT).show();\r\n                        setPagerLayout();\r\n                    } else {\r\n                        Snackbar snackbar = Snackbar.make(mDrawerLayout, \"Provide the Storage Permission\", Snackbar.LENGTH_LONG);\r\n                        snackbar.show();\r\n                        finish();\r\n                    }\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setting up the tab layout with the viewpager in it.\r\n     */\r\n\r\n    private void createNotificationChannel() {\r\n        // Create the NotificationChannel, but only on API 26+ because\r\n        // the NotificationChannel class is new and not in the support library\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            CharSequence name = \"Show Notification\";\r\n            String description = \"This allows you to show notification\";\r\n            int importance = NotificationManager.IMPORTANCE_DEFAULT;\r\n            NotificationChannel channel = new NotificationChannel(CreateNotification.CHANNEL_ID, name, importance);\r\n            channel.setDescription(description);\r\n            // Register the channel with the system; you can't change the importance\r\n            // or other notification behaviors after this\r\n            notificationManager = getSystemService(NotificationManager.class);\r\n            notificationManager.createNotificationChannel(channel);\r\n        }\r\n    }\r\n\r\n    private void setPagerLayout() {\r\n        ViewPagerAdapter adapter = new ViewPagerAdapter(getSupportFragmentManager(), getContentResolver());\r\n        viewPager.setAdapter(adapter);\r\n        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {\r\n            @Override\r\n            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onPageSelected(int position) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onPageScrollStateChanged(int state) {\r\n\r\n            }\r\n        });\r\n\r\n        tabLayout = findViewById(R.id.tabs);\r\n        tabLayout.setTabGravity(TabLayout.GRAVITY_FILL);\r\n        tabLayout.setupWithViewPager(viewPager);\r\n        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                viewPager.setCurrentItem(tab.getPosition());\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Function to show the dialog for about us.\r\n     */\r\n    private void about() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(getString(R.string.about))\r\n                .setMessage(getString(R.string.about_text))\r\n                .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n\r\n                    }\r\n                });\r\n        AlertDialog alertDialog = builder.create();\r\n        alertDialog.show();\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        this.menu = menu;\r\n        getMenuInflater().inflate(R.menu.action_bar_menu, menu);\r\n        SearchManager manager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);\r\n        SearchView searchView = (SearchView) menu.findItem(R.id.menu_search).getActionView();\r\n        searchView.setSearchableInfo(manager.getSearchableInfo(getComponentName()));\r\n        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String query) {\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String newText) {\r\n                searchText = newText;\r\n                queryText();\r\n                setPagerLayout();\r\n                return true;\r\n            }\r\n        });\r\n\r\n        return super.onCreateOptionsMenu(menu);\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n\r\n        switch (item.getItemId()) {\r\n            case android.R.id.home:\r\n                mDrawerLayout.openDrawer(GravityCompat.START);\r\n                return true;\r\n            case R.id.menu_search:\r\n                Toast.makeText(this, \"Search\", Toast.LENGTH_SHORT).show();\r\n                return true;\r\n            case R.id.menu_favorites:\r\n                if (checkFlag)\r\n                    if (mediaPlayer != null) {\r\n                        if (favFlag) {\r\n                            Toast.makeText(this, \"Added to Favorites\", Toast.LENGTH_SHORT).show();\r\n                            item.setIcon(R.drawable.ic_favorite_filled);\r\n                            SongsList favList = new SongsList(songList.get(currentPosition).getTitle(),\r\n                                    songList.get(currentPosition).getSubTitle(), songList.get(currentPosition).getLink());\r\n                            FavoritesOperations favoritesOperations = new FavoritesOperations(this);\r\n                            favoritesOperations.addSongFav(favList);\r\n                            setPagerLayout();\r\n                            favFlag = false;\r\n                        } else {\r\n                            item.setIcon(R.drawable.favorite_icon);\r\n                            favFlag = true;\r\n                        }\r\n                    }\r\n                return true;\r\n        }\r\n\r\n        return super.onOptionsItemSelected(item);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Function to handle the click events.\r\n     *\r\n     * @param v\r\n     */\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()) {\r\n            case R.id.img_btn_play:\r\n                playPause();\r\n                break;\r\n            case R.id.btn_refresh:\r\n                Toast.makeText(this, \"Refreshing\", Toast.LENGTH_SHORT).show();\r\n                setPagerLayout();\r\n                break;\r\n            case R.id.img_btn_replay:\r\n\r\n                if (repeatFlag) {\r\n                    Toast.makeText(this, \"Replaying Removed..\", Toast.LENGTH_SHORT).show();\r\n                    mediaPlayer.setLooping(false);\r\n                    repeatFlag = false;\r\n                } else {\r\n                    Toast.makeText(this, \"Replaying Added..\", Toast.LENGTH_SHORT).show();\r\n                    mediaPlayer.setLooping(true);\r\n                    repeatFlag = true;\r\n                }\r\n                break;\r\n            case R.id.img_btn_shuffle:\r\n                if (shuffleFlag) {\r\n                    Toast.makeText(this, \"Shuffling Removed..\", Toast.LENGTH_SHORT).show();\r\n                    songList = defaultSongList;\r\n                } else {\r\n                    Toast.makeText(this, \"Shuffling Added..\", Toast.LENGTH_SHORT).show();\r\n                    defaultSongList = songList;\r\n                    Collections.shuffle(songList);\r\n\r\n                }\r\n                break;\r\n            case R.id.img_btn_previous:\r\n                playPrevious();\r\n                break;\r\n            case R.id.img_btn_next:\r\n                playNext();\r\n                break;\r\n            case R.id.img_btn_setting:\r\n                if (!playContinueFlag) {\r\n                    playContinueFlag = true;\r\n                    Toast.makeText(this, \"Loop Added\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    playContinueFlag = false;\r\n                    Toast.makeText(this, \"Loop Removed\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void playPause() {\r\n        if (checkFlag) {\r\n            if (mediaPlayer.isPlaying()) {\r\n                mediaPlayer.pause();\r\n                playButton = R.drawable.play_icon;\r\n            } else if (!mediaPlayer.isPlaying()) {\r\n                mediaPlayer.start();\r\n                playButton = R.drawable.pause_icon;\r\n                playCycle();\r\n            }\r\n        } else {\r\n            Toast.makeText(this, \"Select the Song ..\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        imgBtnPlayPause.setImageResource(playButton);\r\n        CreateNotification.createNotification(this, songList.get(currentPosition), playButton);\r\n    }\r\n    private void playNext() {\r\n        if (checkFlag) {\r\n            if (currentPosition + 1 < songList.size()) {\r\n                attachMusic(songList.get(currentPosition + 1).getTitle(), songList.get(currentPosition + 1).getLink());\r\n                currentPosition += 1;\r\n            } else {\r\n                Toast.makeText(this, \"Playlist Ended\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        } else {\r\n            Toast.makeText(this, \"Select the Song ..\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        playButton = R.drawable.pause_icon;\r\n        CreateNotification.createNotification(this, songList.get(currentPosition), playButton);\r\n    }\r\n\r\n    private void playPrevious() {\r\n        if (checkFlag) {\r\n            if (mediaPlayer.getCurrentPosition() > 10) {\r\n                if (currentPosition - 1 > -1) {\r\n                    attachMusic(songList.get(currentPosition - 1).getTitle(), songList.get(currentPosition - 1).getLink());\r\n                    currentPosition = currentPosition - 1;\r\n                } else {\r\n                    attachMusic(songList.get(currentPosition).getTitle(), songList.get(currentPosition).getLink());\r\n                }\r\n            } else {\r\n                attachMusic(songList.get(currentPosition).getTitle(), songList.get(currentPosition).getLink());\r\n            }\r\n        } else {\r\n            Toast.makeText(this, \"Select a Song . .\", Toast.LENGTH_SHORT).show();\r\n        }\r\n        playButton = R.drawable.pause_icon;\r\n        CreateNotification.createNotification(this, songList.get(currentPosition), playButton);\r\n    }\r\n\r\n    /**\r\n     * Function to attach the song to the music player\r\n     *\r\n     * @param name\r\n     * @param path\r\n     */\r\n\r\n    private void attachMusic(String name, String path) {\r\n        imgBtnPlayPause.setImageResource(R.drawable.play_icon);\r\n        setTitle(name);\r\n        menu.getItem(1).setIcon(R.drawable.favorite_icon);\r\n        favFlag = true;\r\n\r\n        try {\r\n            mediaPlayer.reset();\r\n            mediaPlayer.setDataSource(path);\r\n            mediaPlayer.prepare();\r\n            setControls();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\r\n            @Override\r\n            public void onCompletion(MediaPlayer mp) {\r\n                imgBtnPlayPause.setImageResource(R.drawable.play_icon);\r\n                if (playContinueFlag) {\r\n                    if (currentPosition + 1 < songList.size()) {\r\n                        attachMusic(songList.get(currentPosition + 1).getTitle(), songList.get(currentPosition + 1).getLink());\r\n                        currentPosition += 1;\r\n                    } else {\r\n                        Toast.makeText(MainActivity.this, \"PlayList Ended\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to set the controls according to the song\r\n     */\r\n\r\n    private void setControls() {\r\n        seekbarController.setMax(mediaPlayer.getDuration());\r\n        mediaPlayer.start();\r\n        playCycle();\r\n        checkFlag = true;\r\n        if (mediaPlayer.isPlaying()) {\r\n            imgBtnPlayPause.setImageResource(R.drawable.pause_icon);\r\n            tvTotalTime.setText(getTimeFormatted(mediaPlayer.getDuration()));\r\n        }\r\n\r\n        seekbarController.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\r\n            @Override\r\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\r\n                if (fromUser) {\r\n                    mediaPlayer.seekTo(progress);\r\n                    tvCurrentTime.setText(getTimeFormatted(progress));\r\n                }\r\n                mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\r\n                    @Override\r\n                    public void onCompletion(MediaPlayer mediaPlayer) {\r\n                        playNext();\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onStartTrackingTouch(SeekBar seekBar) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onStopTrackingTouch(SeekBar seekBar) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to play the song using a thread\r\n     */\r\n    private void playCycle() {\r\n        try {\r\n            seekbarController.setProgress(mediaPlayer.getCurrentPosition());\r\n            tvCurrentTime.setText(getTimeFormatted(mediaPlayer.getCurrentPosition()));\r\n            if (mediaPlayer.isPlaying()) {\r\n                runnable = new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        playCycle();\r\n\r\n                    }\r\n                };\r\n                handler.postDelayed(runnable, 100);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private String getTimeFormatted(long milliSeconds) {\r\n        String finalTimerString = \"\";\r\n        String secondsString;\r\n\r\n        //Converting total duration into time\r\n        int hours = (int) (milliSeconds / 3600000);\r\n        int minutes = (int) (milliSeconds % 3600000) / 60000;\r\n        int seconds = (int) ((milliSeconds % 3600000) % 60000 / 1000);\r\n\r\n        // Adding hours if any\r\n        if (hours > 0)\r\n            finalTimerString = hours + \":\";\r\n\r\n        // Prepending 0 to seconds if it is one digit\r\n        if (seconds < 10)\r\n            secondsString = \"0\" + seconds;\r\n        else\r\n            secondsString = \"\" + seconds;\r\n\r\n        finalTimerString = finalTimerString + minutes + \":\" + secondsString;\r\n\r\n        // Return timer String;\r\n        return finalTimerString;\r\n    }\r\n\r\n\r\n    /**\r\n     * Function Overrided to receive the data from the fragment\r\n     *\r\n     * @param name\r\n     * @param path\r\n     */\r\n\r\n    @Override\r\n    public void onDataPass(String name, String path) {\r\n        Toast.makeText(this, name, Toast.LENGTH_LONG).show();\r\n        attachMusic(name, path);\r\n    }\r\n\r\n    @Override\r\n    public void getLength(int length) {\r\n        this.allSongLength = length;\r\n    }\r\n\r\n    @Override\r\n    public void fullSongList(ArrayList<SongsList> songList, int position) {\r\n        this.songList = songList;\r\n        this.currentPosition = position;\r\n        this.playlistFlag = songList.size() == allSongLength;\r\n        Log.v(\"mainSong\", \"songlist size \" + songList.size() + \" \" + allSongLength);\r\n        this.playContinueFlag = !playlistFlag;\r\n        Log.v(\"mainSong\", \"playContinueFlag \" + playContinueFlag);\r\n        CreateNotification.createNotification(this, songList.get(currentPosition), R.drawable.pause_icon);\r\n    }\r\n\r\n    @Override\r\n    public String queryText() {\r\n        return searchText.toLowerCase();\r\n    }\r\n\r\n    @Override\r\n    public SongsList getSong() {\r\n        currentPosition = -1;\r\n        return currSong;\r\n    }\r\n\r\n    @Override\r\n    public boolean getPlaylistFlag() {\r\n        return playlistFlag;\r\n    }\r\n\r\n    @Override\r\n    public void currentSong(SongsList songsList) {\r\n        this.currSong = songsList;\r\n    }\r\n\r\n    @Override\r\n    public int getPosition() {\r\n        return currentPosition;\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        stopService(openNotification);\r\n        notificationManager.cancel(1);\r\n        unregisterReceiver(broadcastReceiver);\r\n        super.onDestroy();\r\n        mediaPlayer.release();\r\n        handler.removeCallbacks(runnable);\r\n    }\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/com/example/application/musicplayer/Activity/MainActivity.java b/app/src/main/java/com/example/application/musicplayer/Activity/MainActivity.java
--- a/app/src/main/java/com/example/application/musicplayer/Activity/MainActivity.java	
+++ b/app/src/main/java/com/example/application/musicplayer/Activity/MainActivity.java	
@@ -145,7 +145,7 @@
         ActionBar actionBar = getSupportActionBar();
         assert actionBar != null;
         actionBar.setDisplayHomeAsUpEnabled(true);
-        actionBar.setHomeAsUpIndicator(R.drawable.menu_icon);
+//        actionBar.setHomeAsUpIndicator(R.drawable.menu_icon);
 
         imgBtnNext.setOnClickListener(this);
         imgBtnPrev.setOnClickListener(this);
